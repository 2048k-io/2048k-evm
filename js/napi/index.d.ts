/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface EvmAccount {
  address: string
  memory?: MemoryAccount
}
export interface EvmCallData {
  txId: string
  caller: string
  input: string
  amount?: string
}
export interface EvmConfig {
  program: string
  contract: EvmAccount
  state?: Record<string, MemoryAccount>
}
export interface EvmOpts {
  evmConfig: EvmConfig
  forkConfig?: ForkConfig
}
export interface Vicinity {
  /** Gas price. */
  gasPrice: string
  /** Origin. */
  origin: string
  /** Chain ID. */
  chainId: string
  /** Environmental block hashes. */
  blockHashes: Array<string>
  /** Environmental block number. */
  blockNumber: string
  /** Environmental coinbase. */
  blockCoinbase: string
  /** Environmental block timestamp. */
  blockTimestamp: string
  /** Environmental block difficulty. */
  blockDifficulty: string
  /** Environmental block gas limit. */
  blockGasLimit: string
  /** Environmental base fee per gas. */
  blockBaseFeePerGas: string
  /**
   * Environmental randomness.
   *
   * In Ethereum, this is the randomness beacon provided by the beacon
   * chain and is only enabled post Merge.
   */
  blockRandomness?: string
}
export interface ForkConfig {
  /** Gas paid for extcode. */
  gasExtCode: string
  /** Gas paid for extcodehash. */
  gasExtCodeHash: string
  /** Gas paid for sstore set. */
  gasSstoreSet: string
  /** Gas paid for sstore reset. */
  gasSstoreReset: string
  /** Gas paid for sstore refund. */
  refundSstoreClears: number
  /** EIP-3529 */
  maxRefundQuotient: string
  /** Gas paid for BALANCE opcode. */
  gasBalance: string
  /** Gas paid for SLOAD opcode. */
  gasSload: string
  /** Gas paid for cold SLOAD opcode. */
  gasSloadCold: string
  /** Gas paid for SUICIDE opcode. */
  gasSuicide: string
  /** Gas paid for SUICIDE opcode when it hits a new account. */
  gasSuicideNewAccount: string
  /** Gas paid for CALL opcode. */
  gasCall: string
  /** Gas paid for EXP opcode for every byte. */
  gasExpbyte: string
  /** Gas paid for a contract creation transaction. */
  gasTransactionCreate: string
  /** Gas paid for a message call transaction. */
  gasTransactionCall: string
  /** Gas paid for zero data in a transaction. */
  gasTransactionZeroData: string
  /** Gas paid for non-zero data in a transaction. */
  gasTransactionNonZeroData: string
  /** Gas paid per address in transaction access list (see EIP-2930). */
  gasAccessListAddress: string
  /** Gas paid per storage key in transaction access list (see EIP-2930). */
  gasAccessListStorageKey: string
  /** Gas paid for accessing cold account. */
  gasAccountAccessCold: string
  /** Gas paid for accessing ready storage. */
  gasStorageReadWarm: string
  /** EIP-1283. */
  sstoreGasMetering: boolean
  /** EIP-1706. */
  sstoreRevertUnderStipend: boolean
  /** EIP-2929 */
  increaseStateAccessGas: boolean
  /** EIP-3529 */
  decreaseClearsRefund: boolean
  /** EIP-3541 */
  disallowExecutableFormat: boolean
  /** EIP-3651 */
  warmCoinbaseAddress: boolean
  /**
   * Whether to throw out of gas error when
   * CALL/CALLCODE/DELEGATECALL requires more than maximum amount
   * of gas.
   */
  errOnCallWithMoreGas: boolean
  /** Take l64 for callcreate after gas. */
  callL64AfterGas: boolean
  /** Whether empty account is considered exists. */
  emptyConsideredExists: boolean
  /** Whether create transactions and create opcode increases nonce by one. */
  createIncreaseNonce: boolean
  /** Stack limit. */
  stackLimit: string
  /** Memory limit. */
  memoryLimit: string
  /** Call limit. */
  callStackLimit: string
  /** Create contract limit. */
  createContractLimit?: string
  /** EIP-3860, maximum size limit of init_code. */
  maxInitcodeSize?: string
  /** Call stipend. */
  callStipend: string
  /** Has delegate call. */
  hasDelegateCall: boolean
  /** Has create2. */
  hasCreate2: boolean
  /** Has revert. */
  hasRevert: boolean
  /** Has return data. */
  hasReturnData: boolean
  /** Has bitwise shifting. */
  hasBitwiseShifting: boolean
  /** Has chain ID. */
  hasChainId: boolean
  /** Has self balance. */
  hasSelfBalance: boolean
  /** Has ext code hash. */
  hasExtCodeHash: boolean
  /** Has ext block fee. See [EIP-3198](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-3198.md) */
  hasBaseFee: boolean
  /** Has PUSH0 opcode. See [EIP-3855](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-3855.md) */
  hasPush0: boolean
  /** Whether the gasometer is running in estimate mode. */
  estimate: boolean
}
export interface MemoryAccount {
  nonce: string
  balance: string
  storage: Record<string, string>
  code: Array<number>
}
export interface EvmContext {
  evmOpts: EvmOpts
  vicinity?: Vicinity
  calls: Array<EvmCallData>
}
export interface EvmResponse {
  validity: Record<string, any>
  res?: string
  state: Record<string, MemoryAccount>
}
export function run(context: EvmContext): Promise<EvmResponse>
