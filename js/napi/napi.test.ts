import {Context} from "./lib/context";
import {EvmCall} from "./lib/common/call";

const { run } = require('./');

describe("NAPI test", () => {
    test('Test Silly EVM Contract', async () => {
        // // SPDX-License-Identifier: MIT
//         pragma solidity ^0.8.0;
//
//         contract Calculator {
//             string private storedString;
//
//             // Constructor to initialize the stored string
//             constructor(string memory _initString) {
//             storedString = _initString;
//             }
//
//             // Function to view the stored string
//             function getStoredString() public view returns (string memory) {
//             return storedString;
//             }
//
//             // Function to add two numbers
//             function add(uint256 a, uint256 b) public pure returns (uint256) {
//             return a + b;
//             }
//
//             // Recursive function to calculate Fibonacci number
//             function fibonacci(uint256 n) public returns (uint256) {
//             if (n <= 1) {
//             return n;
//             } else {
//             return fibonacci(n - 1) + fibonacci(n - 2);
//             }
//             }

        const context = new Context()
            .program("608060405234801561001057600080fd5b50600436106100415760003560e01c806361047ff414610046578063771602f71461006c578063dcb21d121461007f575b600080fd5b610059610054366004610173565b610094565b6040519081526020015b60405180910390f35b61005961007a36600461018c565b6100ce565b6100876100e1565b60405161006391906101ae565b6000600182116100a2575090565b6100b0610054600284610213565b6100be610054600185610213565b6100c89190610226565b92915050565b60006100da8284610226565b9392505050565b6060600080546100f090610239565b80601f016020809104026020016040519081016040528092919081815260200182805461011c90610239565b80156101695780601f1061013e57610100808354040283529160200191610169565b820191906000526020600020905b81548152906001019060200180831161014c57829003601f168201915b5050505050905090565b60006020828403121561018557600080fd5b5035919050565b6000806040838503121561019f57600080fd5b50508035926020909101359150565b60006020808352835180602085015260005b818110156101dc578581018301518582016040015282016101c0565b506000604082860101526040601f19601f8301168501019250505092915050565b634e487b7160e01b600052601160045260246000fd5b818103818111156100c8576100c86101fd565b808201808211156100c8576100c86101fd565b600181811c9082168061024d57607f821691505b60208210810361026d57634e487b7160e01b600052602260045260246000fd5b5091905056fea26469706673582212201d681b10c3d1f5bfedecac6e7e165204af09ced692b3d5051fc09100107635dd64736f6c63430008170033")
            .programStorage({
                "0x0000000000000000000000000000000000000000000000000000000000000000": "0x48656c6c6f20576f726c64000000000000000000000000000000000000000016"
            })
            .call(
                new EvmCall("TX_ID")
                    .caller("0xf000000000000000000000000000000000000000")
                    .input("dcb21d12")
            );

        const res = await context.run();
        // console.log(Object.keys(res.state));
        // console.log(res);
        // console.log(res.state['0x1000000000000000000000000000000000000000'].storage);

        expect(res.res).toEqual("0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000b48656c6c6f20576f726c64000000000000000000000000000000000000000000");
    });
});